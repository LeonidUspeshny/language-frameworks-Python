ВОПРОСЫ ОТОТВЕПТЫ ПО КУРСУ Фреймворки языка Python

1)Как называются компоненты, из которых строится проект на
фреймворке Django?

Компоненты, из которых строится проект на фреймворке Django, называются:
Модели (Models) — взаимодействуют с базой данных и достают из неё информацию для отображения в браузере.
Представления (Views) — обрабатывают запрос и обращаются к модели, сообщая ей, какую информацию необходимо достать из базы данных.
Шаблоны (Templates) — показывают, каким образом необходимо показать информацию, полученную из базы данных.
URL-маршруты (URL dispatcher) — перенаправляют HTTP-запрос от браузера в представления.


2)Как начать проект на Django?

Чтобы начать проект на Django, выполните следующие шаги:
Установите Python и Django: скачайте и установите Python и Django с официальных сайтов.
Создайте виртуальное окружение: используйте команду python -m venv <имя_окружения> для создания виртуальной среды.
Активируйте виртуальное окружение: запустите команду source <имя_окружения>/bin/activate.
Установите зависимости: используйте команду pip install -r requirements.txt для установки всех зависимостей из файла requirements.txt.
Создайте проект Django: используйте команду django-admin startproject <имя_проекта> для создания нового проекта Django.
Перейдите в каталог проекта: cd <имя_проекта>.
Запустите сервер разработки: python manage.py runserver.
Проверьте работу сервера: откройте браузер и перейдите по адресу localhost:8000.
Теперь у вас есть работающий проект на Django.

3)Чем реализация шаблона MVC отличается в Django?

Реализация шаблона MVC в Django отличается тем, что в нём View (представление) выполняет роль контроллера, а представления именуются шаблонами (Template). Таким образом, архитектура Django называется MTV (ModelTemplate-View).

4)На какие функциональные части разделяется веб-приложение в
Django? Перечислите их названия и предназначение.

Веб-приложение в Django разделяется на следующие функциональные части:
Модель (Model) — отвечает за хранение данных и их обработку.
Представление (View) — создаёт пользовательский интерфейс и обрабатывает запросы от пользователей.
Шаблон (Template) — содержит HTML-код и стили CSS для отображения информации пользователю.

5)Нужно ли для описания таблиц базы данных и запросов к ним
использовать язык SQL?

В Django для работы с базами данных и формирования запросов не обязательно использовать язык SQL напрямую. Django предоставляет абстракцию в виде своего ORM (Object-Relational Mapping), который позволяет взаимодействовать с базой данных, используя Python-код.
С помощью Django ORM вы можете определять модели (таблицы) и выполнять запросы к ним, не погружаясь в детали SQL. Например, для создания модели вам нужно просто определить класс:
from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)

А затем вы можете выполнять запросы к базе данных с помощью методов модели, как это:
# Создание нового продукта
product = Product(name="Товар", price=19.99)
product.save()

# Получение всех продуктов
products = Product.objects.all()

# Фильтрация продуктов
cheap_products = Product.objects.filter(price__lt=20.00)

Однако в некоторых случаях может возникнуть необходимость написать собственный SQL-запрос, и Django предоставляет возможность делать это через метод raw(), а также через функции для прямых взаимодействий с базой данных, но это не является обязательным. В большинстве случаев использование Django ORM достаточно удобно и позволяет избежать необходимости использования SQL

6)Как связать две модели между собой?

Чтобы связать две модели в Django, вы можете использовать отношения OneToOne, ManyToMany или ForeignKey. Отношения определяются с помощью специальных полей, таких как OneToOneField, ManyToManyField или ForeignKey. Пример кода для определения отношения OneToOne:
from django.db import models

class User(models.Model):
 name = models.CharField(max_length=50)

class Profile(models.Model):
 user = models.OneToOneField(User, on_delete=models.PROTECT, primary_key=True)
 language = models.CharField(max_length=50)
 email = models.EmailField(max_length=70, blank=True, unique=True)

def __str__(self):
 return str(self.email)
В этом примере модель User определяет отношение OneToOne с моделью Profile через поле user.

7)Какие есть конструкции шаблонизатора в Django? Для чего
каждая из них предназначена?

В Django есть следующие конструкции шаблонизатора:
Условные операторы (if, elif, else) — используются для проверки условия и выполнения определённого блока кода в зависимости от результата проверки.
Циклы (for, range) — применяются для повторения блоков кода для каждого элемента в списке или диапазоне значений.
Фильтры (add, addslashes, slugify) — позволяют применять математические, строковые или логические операции к данным в шаблоне.
Макросы (include, extends) — используются для включения одного шаблона в другой или наследования содержимого родительского шаблона.
Тег включения (include) — позволяет включить содержимое другого шаблона в текущий.
Тег расширения (extends) — позволяет унаследовать содержимое родительского шаблона и добавить новые блоки кода.
Эти конструкции помогают создавать динамические и интерактивные веб-страницы, а также облегчают разработку и поддержку кода.

8)Какие есть два варианта организации маршрутизации в
шаблонах? Какой из них является рекомендуемым?

Два варианта организации маршрутизации в шаблонах:
На основе URL-адреса.
На основе HTTP-метода (GET, POST, PUT, DELETE).
Рекомендуемый вариант зависит от конкретной ситуации и предпочтений разработчика. Однако многие специалисты считают, что использование маршрутизации на основе URL-адреса является более надёжным и гибким подходом.

9)Для чего используется механизм наследования шаблонов?

Механизм наследования шаблонов в Django используется для создания иерархии шаблонов, чтобы уменьшить дублирование кода и облегчить поддержку. С его помощью можно создавать базовые шаблоны, которые затем расширяются и настраиваются в других шаблонах.

10)Что называется статикой в терминологии Django?

В терминологии Django статикой называются активы, которые не изменяются динамически и должны быть предоставлены пользователю напрямую без обработки со стороны веб-сервера. Примеры таких активов включают CSS-стили, JavaScript-файлы, изображения и шрифты. Статические файлы оптимизируют скорость загрузки страницы, так как они могут кэшироваться браузером.

11)Для чего нужны формы? Как связать форму с моделью?

Формы в Django используются для обработки пользовательского ввода и создания, редактирования и удаления объектов модели. Они позволяют валидировать данные перед сохранением их в базе данных.
Чтобы связать форму с моделью, создайте модельную форму, унаследовав её от ModelForm. Затем укажите модель, для которой создаётся форма, и добавьте необходимые поля. После этого вы можете использовать эту форму в представлении для обработки пользовательского ввода и сохранения данных в базе данных.

12)Что такое валидация? Можно ли создавать пользовательские
валидаторы в Django?

Валидация — это процесс проверки соответствия введённых пользователем данных определённым правилам и требованиям. Django автоматически выполняет базовую валидацию данных, но вы также можете добавить свои собственные правила валидации.
Да, в Django можно создавать пользовательские валидаторы. Для этого нужно переопределить метод clean в классе формы или создать методы clean_<fieldname> для отдельных полей.

13)Чем использование контроллеров-классов отличается от
контроллеров-функций?

Использование контроллеров-классов в Django отличается от контроллеров-функций следующим образом:
Организация кода: контроллеры-классы позволяют разделить код, относящийся к определённым методам HTTP (GET, POST и т. д.), с помощью методов, в отличие от условных переходов в контроллерах-функциях.
Гибкость и расширяемость: общие представления на основе классов предоставляют больше гибкости и расширяемости благодаря использованию миксинов, что делает их более удобными для настройки и адаптации к различным ситуациям.
История развития: общие представления на основе функций были созданы для упрощения разработки, но они имеют ограничения в расширении и настройке, что делает их менее полезными в реальных проектах.

14)Как просмотреть на страницах проекта информацию о
запросах, используемых шаблонах и т. д.?

Чтобы просмотреть информацию о запросах, используемых шаблонах и т. д. в Django, используйте инструмент Django Debug Toolbar. Установите его, следуя инструкциям на странице https://django-debug-toolbar.readthedocs.io/en/latest/installation.html, затем добавьте маршрут «debug» в файл urls.py и перейдите на главную страницу вашего сайта. Справа отобразится панель Debug Toolbar, которая покажет информацию о запросах, используемых шаблонах и т. д.

15)Для чего в контроллерах-классах используется встроенный
метод get_queryset() ?

В Django метод get_queryset() используется в контроллерах-классах для определения списка объектов, которые будут отображаться. По умолчанию он возвращает все объекты для указанной модели. Этот метод связан с ListViews и позволяет фильтровать объекты на основе переменных, полученных из URL.

16)Как организован механизм наследования классов в Python?

Механизм наследования классов в Python организован с использованием концепции одиночного и множественного наследования. Это означает, что классы могут наследоваться от одного базового класса (одиночное наследование) или от нескольких базовых классов одновременно (множественное наследование).
При создании подкласса на основе существующего класса, дочерний класс наследует структуру и методы родительского класса. Наследование записывается с использованием символа «.» (точка) и обозначается как A(B), где A — дочерний класс, а B — родительский класс.

17)Что такое пагинация и какими способами ее можно
организовать на страницах?

Пагинация — это процесс деления большого набора данных на меньшие, более управляемые фрагменты или страницы. В Django пагинацию можно организовать с помощью встроенного модуля django.core.paginator.

18)Как организован механизм регистрации и авторизации в
фреймворке Django?

Механизм регистрации и авторизации в Django организован следующим образом:
Установка и создание проекта: Django автоматически создаёт набор таблиц для хранения информации о пользователях при установке и создании проекта.
Стандартные таблицы авторизации: таблица auth_user содержит записи о пользователях сайта, а также вспомогательные таблицы, такие как auth_permission для разрешений и auth_group для групп пользователей.
Создание приложения авторизации: создайте отдельное приложение с именем users с помощью команды python manage.py startapp users.
Подключение приложения к проекту: добавьте приложение users в коллекцию INSTALLED_APPS в файле settings.py и убедитесь, что модули django.contrib.sessions.middleware.SessionMiddleware и django.contrib.auth.middleware.AuthenticationMiddleware присутствуют в списке MIDDLEWARE.
Определение маршрутов: создайте файлы urls.py в приложении users и проекте, добавив маршруты для форм регистрации и авторизации, таких как login_user() и logout_user().
Связывание маршрутов с Django: свяжите маршруты приложения users с проектом в файле urls.py.

19)Что такое кэширование и что можно кэшировать?

Кэширование в Django — это механизм, который позволяет сохранять результаты выполнения запросов к базе данных или обработки данных для последующего быстрого доступа. В Django кэширование можно применять к представлениям, фрагментам шаблонов и результатам запросов к базе данных.

20)Как установить и подключить любой модуль к проекту
Django?

Установите Python и Django:
Если у вас ещё не установлен Python, скачайте и установите его с официального сайта.
Установите Django с помощью команды pip install Django в терминале.
Создайте новый проект Django:
Перейдите в папку, где хотите создать проект, и запустите команду django-admin startproject myproject.
Установите требуемый модуль:
Откройте терминал в папке с проектом и установите нужный модуль с помощью команды pip install имя_модуля.
Добавьте модуль в INSTALLED_APPS в файле settings.py:
Найдите переменную INSTALLED_APPS и добавьте имя вашего модуля после запятой.
Запустите сервер разработки Django:
В терминале перейдите в папку с проектом и запустите сервер с помощью команды python manage.py runserver.
Теперь ваш модуль должен быть подключен к проекту Django и доступен для использования.
